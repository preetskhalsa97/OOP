import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

// FINALLY!! 
//int r=10; 
//for (int i=0;i<10;i++){
//	circleIcon.setRadius(r);
//	Thread.sleep(1000);
//	iconLabel.repaint(); //this is the shizz
//	r+=20; 
//}


// Driver class
class OnlineMain 
{
	// The following four boolean class variables can be used to determine whether the thread has started or not
	// While starting any thread just make the corresponding flag as  true. Initially no thread is started.
	public static boolean leftThreadStarted 		= false;	//leftThread not started initially
	public static boolean rightThreadStarted 		= false;	//rightThread not started initially
	public static boolean scaleUpThreadStarted 		= false;	//scaleUpThread not started initially
	public static boolean scaleDownThreadStarted 	= false;	//scaleDownThread not started initially

	// The following four boolean class variables can be used to determine which thread is currently running
	// Only one of the following 4 variables will be true at a time and rest other are false.
	// Initially no thread is running
	public static boolean leftThreadRunning 		= false;	//leftThread is not running initially
	public static boolean rightThreadRunning 		= false;	//rightThread is not running initially
	public static boolean scaleUpThreadRunning 		= false;	//scaleUpThread is not running initially
	public static boolean scaleDownThreadRunning 	= false;	//scaleDownThread is not running initially

	// Driver main() Method
	public static void main(String args[]) throws InterruptedException
	{

		JFrame frame = new JFrame("Main Frame");	// original frame
		frame.setSize(600,600);						// size 600 * 600
		frame.setLayout(new BorderLayout());		// layout BorderLayout

		// Create a CircleIcon instance circleIcon with initial radius 10
		CircleIcon circleIcon = new CircleIcon(10);
				
		// Create a JLabel instance named iconLabel which can hold above circleIcon
		final JLabel iconLabel = new JLabel();
		iconLabel.setIcon(circleIcon);		// setting icon for iconLabel

		// Create a JPanel for holding iconLabel
		JPanel centrePanel = new JPanel(new BorderLayout());
		centrePanel.add(iconLabel,BorderLayout.CENTER);		// Adding iconLabel in the center of centrePanel
		
		

		// Create Buttons with labels as mentioned in the Question
		JButton leftButton 			= 	new JButton("LEFT");		// left button
		JButton rightButton 		= 	new JButton("RIGHT");		// right button
		JButton scaleUpButton 		= 	new JButton("SCALE UP");	// scaleUp button
		JButton scaleDownButton 	= 	new JButton("SCALE DOWN");	// scaleDown button
		JButton stopButton 			= 	new JButton("STOP");		// stop button

		// Create a buttonPanel for holding buttons
		JPanel buttonPanel		=	new JPanel();

		// Add buttons to buttonPanel
		buttonPanel.add(leftButton);
		buttonPanel.add(rightButton);
		buttonPanel.add(scaleUpButton);
		buttonPanel.add(scaleDownButton);
		buttonPanel.add(stopButton);


		// Add centrePanel to center of frame
		frame.add(centrePanel,BorderLayout.CENTER);

		// Add buttonPanel to south portion of frame
		frame.add(buttonPanel,BorderLayout.SOUTH);

		// Display Frame
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);	// Default close operation
		
//		int x=300; 
//		for (int i=0;i<10;i++){
//			circleIcon.setX(x);
//			Thread.sleep(1000);
//			iconLabel.repaint(); //this is the shizz
//			x+=20; 
//		}

		//---------------------------------------- WRITE YOUR CODE FROM HERE---------------------------

		// Complete the following thread creating statement(s) after removing the comments

		final LeftThread leftThread 			= 	new LeftThread(frame,circleIcon,circleIcon.getX());
		final RightThread rightThread 			= 	new RightThread(frame,circleIcon,circleIcon.getX(),circleIcon.getRadius());
		final ScaleUpThread scaleUpThread 		= 	new ScaleUpThread(frame,circleIcon,circleIcon.getX(),circleIcon.getRadius()); 
		final ScaleDownThread scaleDownThread 	= 	new ScaleDownThread(frame,circleIcon,circleIcon.getRadius());


		// WRITE JAVA CODE FOR ACTIONLISTENERS FOR VARIOUS BUTTONS. USE ONLY INNER CLASSES FOR THE SAME
		
		rightButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent ae){
				rightThread.start();		
			}		
		});
		
		leftButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent ae){
				leftThread.start();		
			}		
		}); 
		
		scaleDownButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent ae){
				scaleDownThread.start();		
			}		
		});
		
		scaleUpButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent ae){
				scaleUphread.start();		
			}		
		});
		

	} // End of main() Method
}// End of class OnlineMain