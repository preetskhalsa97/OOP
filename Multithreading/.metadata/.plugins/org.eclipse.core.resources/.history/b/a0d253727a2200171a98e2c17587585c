import java.awt.Color;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JTextArea;
import javax.swing.JTextField;

class MasterController	extends	Thread
{
	private	ArrayList<Player>	playerList;		//	Player List
	private	AnswerBoard		answerBoard;		//	sharable answer board

	private	JTextField		timerTextField;		//	timerTextField to initialize the timer thread
	private	JTextArea		resultTextArea;		//	result display area

	private	JTextField		oT1;			//	option choice 1
	private	JTextField		oT2;			//	option choice 2
	private	JTextField		oT3;			//	option choice 3
	private	JTextField		oT4;			//	option choice 4

	private	JTextField		cT1;			//	option Coorect Choice 1
	private	JTextField		cT2;			//	option Coorect Choice 2
	private	JTextField		cT3;			//	option Coorect Choice 3
	private	JTextField		cT4;			//	option Coorect Choice 4
	
	private	JTextField		winnerPlayer;		//	TextField for displaying the id of winner
	private JTextField		timeTaken;		//	TextField for displaying the time taken by the winner	

	private	TimerThread		timer;			//	timer thread
	private	Question		currentQuestion;	//	current Question
	private JButton			resetB;			//	reset button (for enabling)
	private	boolean			suspendFlag;		//	suspend flag
	
	public	void			mysuspend()	{	suspendFlag = true;	}
	public	synchronized	void	myresume()	
	{	
		//System.out.println("Master Resuming");
		suspendFlag = false;
		notify();	
	}
	
	// Constructor
		MasterController(ArrayList<Player> playerList,AnswerBoard answerBoard,JTextField timerTextField,JTextArea resultTextArea,JTextField oT1,JTextField oT2,JTextField oT3,JTextField oT4, JTextField ct1, JTextField ct2, JTextField ct3, JTextField ct4,JTextField t5,JTextField t6,JButton b)
		{
			this.playerList		=	playerList;
			this.answerBoard	=	answerBoard;
			this.timerTextField	=	timerTextField;
			this.resultTextArea	=	resultTextArea;
			this.oT1		=	oT1;
			this.oT2		=	oT2;
			this.oT3		=	oT3;
			this.oT4		=	oT4;
			resetB			=	b;
			cT1			=	ct1;
			cT2			=	ct2;
			cT3			=	ct3;
			cT4			=	ct4;
	
			winnerPlayer		=	t5;
			timeTaken		=	t6;
			suspendFlag		=	true;
			timer			=	new	TimerThread(timerTextField,answerBoard);
			timer.start();
		}
		
		// Add any other method that you think is required as per specification
		public	void	run()
		{
			// Complete the implementation for this method
			try{
				while (true){
					synchronized(this){
						while (suspendFlag){
							wait(); 
						}
						// task 1: display the question sequence in resp. text fields
						oT1.setText(currentQuestion.getOptionSequence()[0]);
						oT2.setText(currentQuestion.getOptionSequence()[1]);
						oT3.setText(currentQuestion.getOptionSequence()[2]);
						oT4.setText(currentQuestion.getOptionSequence()[3]);				
												
						// task 2: activate all players, timer;  wait for the timer to expire
						
						for (int i=0;i<10;i++){  //major doubt
							playerList.get(i).myresume();
						} // but start timer simultaneously?!
						timer.myresume();
						wait();						
						
						//  task 3: after the timer expires, lock the ans board 
						
						answerBoard.lock(); 
						
						// task 4: display correct ans 
						
						cT1.setText(currentQuestion.getCorrectSequence()[0]+"");
						cT2.setText(currentQuestion.getCorrectSequence()[1]+"");
						cT3.setText(currentQuestion.getCorrectSequence()[2]+"");
						cT4.setText(currentQuestion.getCorrectSequence()[3]+"");
						
						// task 5: display ans given by players in result display area 
						
						for (Player i: playerList){
							for (int j:i.ans.getAnswerSequence()){
								System.out.println(j);
							}
						}
						
						
						
						// task 6: change player button to RED/ GREEN depending on whether their ans is correct 
						
						for (int i=0;i<10;i++){
							if (playerList.get(i).ans.getAnswerSequence()==currentQuestion.getCorrectSequence()){
								playerList.get(i).getButton().setForeground(Color.GREEN);
							}
							else{
								playerList.get(i).getButton().setForeground(Color.RED);
							}
						}
						
						
						
						// task 7: display winner details 
						
						// task 8: reinitialize timer for the next iteration of game
					}
				}
			}
			catch(InterruptedException ex){}
		}
		
}
	
	
	
	
	
	
	
	